package com.fullsecurity.server;

import android.util.Log;

import java.io.PrintWriter;

@SuppressWarnings("all")
public class ServerState {
    private int id;                             // userId, a unique integer that identifes each of the four fragments
    private long timeStamp;                     // time in milliseconds since the epoch of last client operation
    private int typeExpected;                   // type expected in client request: 1=first STS request, 2=second STS request, 3=encrypted operation request
    private int remainingKeyUses;               // remaining number of type 3 uses for this key
    private byte[] clientPublicKey;             // DH g^x mod p generated by client
    private byte[] serverPublicKey;             // DH g^x mod p generated by server
    private byte[] key;                         // final computed AES encryption key
    private PrintWriter printWriter;            // the socket that the server should use to respond to this client

    public ServerState(int id) {
        this.id = id;
        this.typeExpected = 1;
        this.remainingKeyUses = 0;
        this.clientPublicKey = null;
        this.serverPublicKey = null;
        this.key = null;
        this.timeStamp = System.currentTimeMillis();
        printWriter = null;
    }

    public String toString() {
        long cTime = System.currentTimeMillis() / 1000;
        long idleTime = cTime - getTimeStamp();
        return String.format("ID=%3d  idle=%3d  rem=%3d", getId(), idleTime, getRemainingKeyUses());
    }

    public boolean hasExpired(long lifetime) {
        long cTime = System.currentTimeMillis() / 1000;
        return cTime - getTimeStamp() > lifetime;
    }

    public long getTimeStamp() {
        return timeStamp / 1000;
    }

    public void setTimeStamp(long timeStamp) {
        this.timeStamp = timeStamp;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getTypeExpected() {
        return typeExpected;
    }

    public void setTypeExpected(int typeExpected) {
        this.typeExpected = typeExpected;
    }

    public int getRemainingKeyUses() {
        return remainingKeyUses;
    }

    public void setRemainingKeyUses(int remainingKeyUses) {
        this.remainingKeyUses = remainingKeyUses;
    }

    public byte[] getClientPublicKey() {
        return clientPublicKey;
    }

    public void setClientPublicKey(byte[] clientPublicKey) {
        this.clientPublicKey = clientPublicKey;
    }

    public byte[] getServerPublicKey() {
        return serverPublicKey;
    }

    public void setServerPublicKey(byte[] serverPublicKey) {
        this.serverPublicKey = serverPublicKey;
    }

    public byte[] getKey() {
        return key;
    }

    public void setKey(byte[] key) {
        this.key = key;
    }

    public PrintWriter getPrintWriter() {
        return printWriter;
    }

    public void setPrintWriter(PrintWriter printWriter) {
        this.printWriter = printWriter;
    }
}
